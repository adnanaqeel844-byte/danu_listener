name: Build & Auto-sign APK

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ANDROID_SDK_ROOT: ${{ runner.temp }}/android-sdk
      KEY_ALIAS: danu_debug
      KEY_PASSWORD: danu123
      KEYSTORE_PASSWORD: danu123
      KEYSTORE_NAME: debug-keystore.jks
      BUILD_TOOLS_VERSION: 33.0.2

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Android SDK command-line tools
        run: |
          mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
          cd $ANDROID_SDK_ROOT/cmdline-tools
          curl -sSf -o commandlinetools.zip https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools.zip
          mkdir -p $ANDROID_SDK_ROOT/cmdline-tools/latest
          mv cmdline-tools/* $ANDROID_SDK_ROOT/cmdline-tools/latest/ || true
          yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT "platform-tools" "platforms;android-33" "build-tools;${{ env.BUILD_TOOLS_VERSION }}"

      - name: Show sdkmanager and build-tools
        run: |
          ls -la $ANDROID_SDK_ROOT
          $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --list --sdk_root=$ANDROID_SDK_ROOT || true

      - name: Generate keystore
        run: |
          mkdir -p ${{ runner.temp }}
          keytool -genkeypair -alias $KEY_ALIAS -keyalg RSA -keysize 2048 -validity 10000 -keystore ${{ runner.temp }}/${{ env.KEYSTORE_NAME }} -storepass $KEYSTORE_PASSWORD -keypass $KEY_PASSWORD -dname "CN=Danu, OU=Dev, O=Personal, L=Unknown, ST=Unknown, C=US"

      - name: Build APK
        working-directory: android_project
        run: |
          chmod +x ./gradlew || true
          ./gradlew assembleRelease --no-daemon || ./gradlew assembleDebug --no-daemon || true

      - name: Find APK path
        run: |
          echo "Looking for apks..."
          find android_project -type f -name "*.apk" -print

      - name: Sign APK with apksigner
        run: |
          BUILD_TOOLS=${{ env.ANDROID_SDK_ROOT }}/build-tools/${{ env.BUILD_TOOLS_VERSION }}
          KEYSTORE_PATH=${{ runner.temp }}/${{ env.KEYSTORE_NAME }}
          # pick the first unsigned apk (prefer release then debug)
          APK=$(find android_project/app/build/outputs -type f -name "*-unsigned.apk" | head -n1)
          if [ -z "$APK" ]; then
            APK=$(find android_project/app/build/outputs -type f -name "*-release.apk" | head -n1)
          fi
          if [ -z "$APK" ]; then
            APK=$(find android_project/app/build/outputs -type f -name "*-debug.apk" | head -n1)
          fi
          echo "APK chosen: $APK"
          if [ -z "$APK" ]; then
            echo "No APK found, fail."
            exit 1
          fi
          SIGNED_APK=${APK%.apk}-signed.apk
          echo "Signing using apksigner from $BUILD_TOOLS"
          $BUILD_TOOLS/apksigner sign --ks $KEYSTORE_PATH --ks-pass pass:$KEYSTORE_PASSWORD --key-pass pass:$KEY_PASSWORD --out $SIGNED_APK $APK
          echo "Signed APK at: $SIGNED_APK"
          ls -l $SIGNED_APK || true
          echo "::set-output name=signed_apk::$SIGNED_APK"

      - name: Upload signed APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-signed-apk
          path: ${{ steps.sign.outputs.signed_apk || 'android_project/app/build/outputs/apk/debug/app-debug-signed.apk' }}

      - name: Upload keystore artifact
        uses: actions/upload-artifact@v4
        with:
          name: debug-keystore
          path: ${{ runner.temp }}/${{ env.KEYSTORE_NAME }}

